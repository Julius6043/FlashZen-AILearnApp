'use server';

/**
 * @fileOverview Validates the JSON structure generated by the LLM.
 *
 * - validateJson - A function that validates the JSON structure.
 * - ValidateJsonInput - The input type for the validateJson function.
 * - ValidateJsonOutput - The return type for the validateJson function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ValidateJsonInputSchema = z.object({
  jsonString: z
    .string()
    .describe('The JSON string to validate, representing flashcard data.'),
});
export type ValidateJsonInput = z.infer<typeof ValidateJsonInputSchema>;

const ValidateJsonOutputSchema = z.object({
  isValid: z.boolean().describe('Whether the JSON string is valid or not.'),
  errorMessage: z.string().optional().describe('Error message if the JSON is invalid.'),
});
export type ValidateJsonOutput = z.infer<typeof ValidateJsonOutputSchema>;

export async function validateJson(input: ValidateJsonInput): Promise<ValidateJsonOutput> {
  return validateJsonFlow(input);
}

const validateJsonFlow = ai.defineFlow(
  {
    name: 'validateJsonFlow',
    inputSchema: ValidateJsonInputSchema,
    outputSchema: ValidateJsonOutputSchema,
  },
  async input => {
    try {
      JSON.parse(input.jsonString);
      return {isValid: true};
    } catch (e: any) {
      return {isValid: false, errorMessage: e.message};
    }
  }
);
